#!/usr/bin/env groovy

timeout(time: 90, unit: 'MINUTES') {
  node('rhel8-24gb'){
    stage('Checkout repo') {
      deleteDir()
      dir('vscode-knative') {
        git url: "https://github.com/${FORK}/vscode-knative.git",
          branch: "${BRANCH}"
      }
      dir('cdk-scripts') {
        git url: 'https://github.com/odockal/cdk-scripts.git',
          branch: "master"
      }
    }

    stage('Setup CRC environment') {
      sh '${WORKSPACE}/vscode-knative/test/ui-test/scripts/prepare-env.sh'
    }

    stage('Download and Setup CRC') {
      timeout(time: 15, unit: 'MINUTES') {
        withCredentials([string(credentialsId: 'crc-pull-secret', variable: 'PULL_SECRET')]){
          writeFile(file: "${env.WORKSPACE}/crc-pull-secret.txt", text: "${env.PULL_SECRET}", encoding: "UTF-8")
          env.CRC_PULL_SECRET = "${env.WORKSPACE}/crc-pull-secret.txt"
          sh '${WORKSPACE}/vscode-knative/test/ui-test/scripts/setup-crc.sh'
        }
      }
    }

    stage('Run CRC and install Serverless operator, setup KNative on the cluster') {
      timeout(time: 45, unit: 'MINUTES') {
        sh '${WORKSPACE}/vscode-knative/test/ui-test/scripts/run-crc.sh'
      }
    }

    stage('Install requirements') {
      def nodeHome = tool 'nodejs-12.13.1'
      env.PATH="${env.PATH}:${nodeHome}/bin"
      sh "npm install -g typescript vsce"
    }

    stage('Build') {
      dir('vscode-knative') {
        sh "npm install"
        sh "npm run build"
      }
    }

    stage('Test') {
      wrap([$class: 'Xvnc']) {
        dir('vscode-knative') {
          sh "npm test"
        }
      }
    }

    stage('UI Tests') {
      wrap([$class: 'Xvnc']) {
        dir('vscode-knative') {
          try {
            sh "npm run ui-test"
          }
          finally {
            archiveArtifacts artifacts: '**/test-resources/*.log,**/test-resources/**/*.png'
          }
        }
      }
    }
  }
}
